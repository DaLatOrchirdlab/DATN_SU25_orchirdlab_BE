// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using orchid_backend_net.Infrastructure.Persistence;

#nullable disable

namespace orchid_backend_net.Infrastructure.Migrations
{
    [DbContext(typeof(OrchidDbContext))]
    partial class OrchidDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Characteristic", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeedlingAttributeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeedlingID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("SeedlingAttributeID");

                    b.HasIndex("SeedlingID");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Disease", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfectedRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("solution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Disease");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Element", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Element");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ElementInStage", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ElementID")
                        .HasColumnType("int");

                    b.Property<string>("StageID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ElementID");

                    b.HasIndex("StageID");

                    b.ToTable("ElementInStage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ExperimentLog", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodID")
                        .HasColumnType("int");

                    b.Property<string>("TissueCultureBatchID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("MethodID");

                    b.HasIndex("TissueCultureBatchID");

                    b.ToTable("ExperimentLogs");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Hybridization", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExperimentLogID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ExperimentLogID");

                    b.HasIndex("ParentID");

                    b.ToTable("Hybridization");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Img", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ReportID");

                    b.ToTable("Imgs");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.InfectedSample", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiseaseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SampleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("SampleID");

                    b.ToTable("InfectedSamples");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.LabRoom", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("LabRoom");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Linked", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ExperimentLogID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SampleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TaskID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ExperimentLogID");

                    b.HasIndex("SampleID");

                    b.HasIndex("TaskID");

                    b.ToTable("Linkeds");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Method", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Method");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Referent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("StageAttributeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StageID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("StageAttributeID");

                    b.HasIndex("StageID");

                    b.ToTable("Referents");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Report", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Technician")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ReportAttribute", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferentDataID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ReferentDataID");

                    b.HasIndex("ReportID");

                    b.ToTable("ReportAttributes");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Sample", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Sample");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Seedling", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Create_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Create_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Delete_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Delete_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Update_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Seedling");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.SeedlingAttribute", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("SeedlingAttribute");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Stage", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("MethodID");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.StageAttribute", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("StageAttribute");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Task", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Create_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Researcher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskAssign", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TaskID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TechnicianID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.HasIndex("TechnicianID");

                    b.ToTable("TaskAssigns");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskAttribute", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TaskID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskAttributes");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TissueCultureBatch", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("LabRoomID");

                    b.ToTable("TissueCultureBatches");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Create_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Characteristic", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.SeedlingAttribute", "SeedlingAttribute")
                        .WithMany()
                        .HasForeignKey("SeedlingAttributeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Seedling", "Seedling")
                        .WithMany()
                        .HasForeignKey("SeedlingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seedling");

                    b.Navigation("SeedlingAttribute");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ElementInStage", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ExperimentLog", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Method", "Method")
                        .WithMany()
                        .HasForeignKey("MethodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.TissueCultureBatch", "TissueCultureBatch")
                        .WithMany()
                        .HasForeignKey("TissueCultureBatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("TissueCultureBatch");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Hybridization", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.ExperimentLog", "ExperimentLog")
                        .WithMany()
                        .HasForeignKey("ExperimentLogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Seedling", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExperimentLog");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Img", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.InfectedSample", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Linked", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.ExperimentLog", "ExperimentLog")
                        .WithMany()
                        .HasForeignKey("ExperimentLogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExperimentLog");

                    b.Navigation("Sample");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Referent", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.StageAttribute", "StageAttribute")
                        .WithMany()
                        .HasForeignKey("StageAttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");

                    b.Navigation("StageAttribute");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ReportAttribute", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.SeedlingAttribute", "ReferentData")
                        .WithMany()
                        .HasForeignKey("ReferentDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferentData");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Stage", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Method", "Method")
                        .WithMany()
                        .HasForeignKey("MethodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskAssign", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.User", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskAttribute", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TissueCultureBatch", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.LabRoom", "LabRoom")
                        .WithMany()
                        .HasForeignKey("LabRoomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabRoom");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.User", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
